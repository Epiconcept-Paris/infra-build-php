#!/bin/sh
#
#	Build packages for mypkg tests
#
#	Usage:	[mypkg|.]/bake <version>
#
Prg=tests/mypkg/`basename $0`
Dir=`dirname $0`
IniPwd=$PWD
PkgTop=

Path() { realpath --relative-to=$IniPwd $1; }
test "$Dir" || Dir=`dirname \`realpath $0\``
expr "$Dir" : / >/dev/null && Dir=`Path $Dir`
test "$Dir" = '.' || cd "$Dir"
#   Script's CWD is where it is located, but all messages assume PWD is top-level

Usage()
{
    local code

    test "$1" && code=$1 || code=1
    echo "Usage: $Prg <name_version:[depends]:[provides]:[conflicts]>" >&2
    exit $code
}

#
#   Check usage
#
test "$1" = 'clean' || {
    test $# -gt 0 && { echo "$Prg: ignoring arguments '$*'" >&2; exit 1; }
}

DebVer=buster
Dist=${PkgTop}dist
Logs=$Dist/.logs
User=`id -un`
AddUser="groupadd -g `id -g` `id -gn`; useradd -u `id -u` -g `id -g` $User"

#
#   Build the image
#
MYPKG_TOP=/opt/mypkg
MYPKG_BASE=epi-mypkg
MYPKG_IMG=$MYPKG_BASE:$DebVer
MYPKG_NAME=epi_mypkg
if [ "$1" = 'clean' ]; then
    docker images | grep -q "$MYPKG_BASE *$DebVer" && docker rmi $MYPKG_IMG >/dev/null && echo "Removed docker image '$MYPKG_IMG'" && rmed='y'
    test -d "$Dist" && rm -rf $Dist && echo "Removed '$Dist/'" && rmed='y'
    test "$rmed" || echo "$Prg: nothing to clean" >&2
    exit 0
fi

date '+===== %Y-%m-%d %H:%M:%S %Z =================='
Now=`date '+%s'`

if docker ps | grep -q $MYPKG_NAME; then
    if [ -f ${PkgTop}.norun ]; then
	Stop="docker stop $MYPKG_NAME >/dev/null\n    "
    else
	echo "Stopping the running '$MYPKG_NAME' container..."
	docker stop -t 5 $MYPKG_NAME >/dev/null
	while docker ps | grep -q $MYPKG_NAME
	do
	    sleep 1
	done
    fi
fi
#   Safety check, as we always call docker run with --rm
if docker ps -a | grep -q $MYPKG_NAME; then
    test -f ${PkgTop}.norun || { echo "Deleting the existing '$MYPKG_NAME' container..."; docker rm $MYPKG_NAME >/dev/null; }
fi

if docker images | grep -q "$MYPKG_BASE *$DebVer"; then
    echo "Re-using the existing '$MYPKG_IMG' image. Use:\n    docker rmi $MYPKG_IMG\nto force a rebuild."
else
    echo "Building the '$MYPKG_IMG' image..."
    PKGCOPY="COPY ${PkgTop}src $MYPKG_TOP/src
    COPY ${PkgTop}run/build $MYPKG_TOP"
    mkdir -p $Logs

    if [ "$http_proxy" -a "$https_proxy" ]; then
	BldArgs="--build-arg http_proxy=$http_proxy --build-arg https_proxy=$https_proxy"
    fi
    #   Variables come in order of their appearance in Dockerfile.in
    DEBVER="$DebVer" USER="$User" ADDUSER="$AddUser" MYPKG_TOP="$MYPKG_TOP" PKGCOPY="$PKGCOPY" envsubst '$DEBVER $USER $ADDUSER $MYPKG_TOP $PKGCOPY' <${PkgTop}Dockerfile.in | tee $Logs/Dockerfile | docker build -f - -t $MYPKG_IMG $BldArgs . >$Logs/docker.out 2>&1
fi

#
#   Run the container
#
if [ "$http_proxy" -a "$https_proxy" ]; then
    Env="--env http_proxy=$http_proxy --env https_proxy=$https_proxy"
fi
Cmd="docker run -ti -v `realpath $PWD/$Dist`:$MYPKG_TOP/dist $Env --name $MYPKG_NAME --rm $MYPKG_IMG"
Spec=$Dist/pkgspecs
if [ ! -f $Spec ]; then
    echo "No $Spec file: copying file ${PkgTop}pkgspecs to it."
    mkdir -p $Dist
    cp -p ${PkgTop}pkgspecs $Spec
fi
if [ -f ${PkgTop}.norun ]; then
    echo "Use:\n    $Stop$Cmd bash\nto run the mypkg container"
else
    echo "Running the '$MYPKG_NAME' container:\n    $Cmd"
    $Cmd
fi

#
#   End
#
date '+===== %Y-%m-%d %H:%M:%S %Z =================='
End=`date '+%s'`
Len=`expr $End - $Now`
Min=`expr $Len / 60`
Sec=`expr $Len - '(' $Min '*' 60 ')'`
printf "Duration: %d:%02d\n" $Min $Sec
