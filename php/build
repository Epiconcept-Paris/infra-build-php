#!/bin/sh
#
#	build - Configure, compile and test from PHP source
#		Install and build all packages in pkgs
#
Prg=`basename $0`
Bld=`dirname $0`
Ver="$1"
Pkgs="$Bld/dist/.pkgs-$Ver"
Logs="$Bld/dist/.logs-$Ver"
Top="$Bld/top"
Maj=`echo $Ver | awk -F. '{print $1}'`
Min=`echo $Ver | awk -F. '{print $2}'`

set -e	# Stop on errors
test -d $Logs && rm -f $Logs/*.out || mkdir $Logs

echo "Extracting php-$Ver source..."
test -d /usr/src/php && rm -rf /usr/src/php/php-* || mkdir /usr/src/php
tar xf $Bld/files/php-$Ver.tar.bz2 -C /usr/src/php

cd /usr/src/php/php-$Ver
Opt='--with-mcrypt'
grep -- $Opt configure >/dev/null && WithMCrypt=$Opt || echo "No '$Opt' option in 'configure'. Using extension."
Opt='--enable-gd-native-ttf'
grep -- $Opt configure >/dev/null && EnaGdTtf=$Opt || echo "No '$Opt' option in 'configure'. Discarded."

if [ -d $Bld/hooks ]; then
    for hook in $Bld/hooks/*
    do
	Show=
	Opt=
	. $hook
	if [ "$Show" ]; then
	    test "$ExtShow" && ExtShow="$ExtShow + $Show" || ExtShow=" with $Show"
	fi
	if [ "$Opt" ]; then
	    test "$ExtOpts" && ExtOpts="$ExtOpts $Opt" || ExtOpts="$Opt"
	fi
    done
    if [ "$ExtOpts" ]; then
	#cp -p configure $Logs/configure0
	./buildconf --force >$Logs/buildconf.out
	#cp -p configure $Logs
    fi
fi

echo "Configuring php-$Ver$ExtShow..."
(cd /usr/include; test -d curl -o -h curl || ln -s x86_64-linux-gnu/curl .)	# For OAuth
test -d /var/run/apache2 || mkdir /var/run/apache2	# For apache2 -V in configure
eval `grep '^export APACHE_' /etc/apache2/envvars`	# For apache2 -V in configure
export PHP_SYSCONFDIR="/etc/php"
./configure	\
	--prefix=/usr \
	--mandir=/usr/share/man \
	--disable-rpath \
	--disable-cgi \
	--disable-phpdbg \
	--with-pear=/usr/share/php \
	--with-apxs2=/usr/bin/apxs \
	--with-config-file-path="$PHP_SYSCONFDIR" \
	--with-config-file-scan-dir="$PHP_SYSCONFDIR/conf.d" \
	--with-freetype-dir=/usr \
	--with-jpeg-dir=/usr \
	--with-png-dir=/usr \
	--with-xpm-dir=/usr,/usr/X11R6 \
	--with-zlib-dir=/usr \
	--with-pdo-mysql=/usr \
	--with-mysqli=/usr/bin/mysql_config \
	--with-bz2 \
	--with-curl \
	--with-gd \
	--with-gettext \
	--with-iconv \
	--with-mhash \
	--with-pcre-regex \
	--with-openssl \
	--with-xsl \
	--with-zlib \
	$WithMCrypt \
	$ExtOpts \
	$EnaGdTtf \
	--enable-bcmath \
	--enable-ctype \
	--enable-dom \
	--enable-ftp \
	--enable-hash \
	--enable-json \
	--enable-libxml \
	--enable-mbstring \
	--enable-pdo \
	--enable-posix \
	--enable-session \
	--enable-simplexml \
	--enable-soap \
	--enable-sockets \
	--enable-sysvmsg \
	--enable-sysvsem \
	--enable-sysvshm \
	--enable-wddx \
	--enable-xml \
	--enable-xmlreader \
	--enable-xmlwriter \
	--enable-zip \
	--disable-debug \
>$Logs/config.out 2>&1
grep 'WARNING:' $Logs/config.out | egrep -v 'bison version|need re2c'

echo "Building php-$Ver..."
make >$Logs/make.out 2>&1

set +e	# Continue on errors
if [ -f $Bld/.notest ]; then
    echo "Skiping php-$Ver tests."
else
    echo "Testing php-$Ver..."
    echo "s" | make test >$Logs/make-test.out 2>&1
    test -f php_test_results_*.txt && cp -p php_test_results_*.txt $Logs
fi

rm -f $Pkgs
Cli="`cat $Bld/pkgs/01-cli/name`-$Maj-$Min"
for dir in $Bld/pkgs/*
do
    Pkg=`basename $dir`
    Top=$dir/top
    Name="`cat $dir/name`-$Maj-$Min"

    echo "Installing package '$Pkg'..."

    # doc directory
    sed -i "s/%YEAR%/`date '+%Y'`/" $Top/usr/share/doc/pkgname/copyright
    sed -i -e "s/%NAME%/$Name/g" -e "s/%VERSION%/$Ver/" -e "s/%DEBVER%/$DEBVER/" -e "s/%DATE%/`date -Rr $Bld/.date`/" $Top/usr/share/doc/pkgname/changelog.Debian
    gzip -n9 $Top/usr/share/doc/pkgname/changelog*
    mv $Top/usr/share/doc/pkgname $Top/usr/share/doc/$Name

    # lintian overrides
    if [ -f $Top/usr/share/lintian/overrides/pkgname ]; then
	sed -i "s/%NAME%/$Name/g" $Top/usr/share/lintian/overrides/pkgname
	mv $Top/usr/share/lintian/overrides/pkgname $Top/usr/share/lintian/overrides/$Name
    fi

    # specific package install
    . $dir/install

    # DEBIAN directory
    sed -i -e "s/%VERSION%/$Ver-$BUILD_NUM/" -e "s/%NAME%/$Name/" -e "s/%DEPS%/$CLI_DEPS/" -e "s/%CLI%/$Cli/" $Top/DEBIAN/control

    # Gather extra license files
    find $Top -type f -iname license | while read f
    do
	lf=`echo $f | sed "s;^$Top/usr/share/doc/$Name/;;"`
	echo "Removing extra license file $lf."
	rm -v $f >>$Logs/rmed_$Pkg.out
    done

    echo "Assembling package '$Pkg'..."
    out=$(fakeroot dpkg-deb -Zgzip --build $Top $Bld/dist)
    deb=$(echo $out | sed "s/^.*building package ['\`][^']*' in ['\`]\([^']*\)'\.$/\1/")

    if [ -f "$deb" ]; then
	echo "Checking package '$Pkg' -> $deb..."
	lintian --allow-root $deb >$Logs/lintian_$Pkg.out
	echo "`basename $deb`" >>$Pkgs
    else
	echo "out=\"$out\" deb=\"$deb\""
    fi
done

#make clean >$Logs/make-clean.out 2>&1
