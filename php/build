#!/bin/sh
#
#	build - Configure, compile and test from PHP source
#		Install and build all packages in pkgs
#
Prg=`basename $0`
Bld=`dirname $0`
Ver="$1"
SupVer="5.2 5.6 7.1 7.2"			# UPDATE THIS on new version
Logs="$Bld/dist/.logs"				# Directory for log files
Pkgs="$Bld/dist/.pkgs"				# List of packages built
Debug="$Bld/dist/.debug"			# Directory for debug files
Maj=`echo $Ver | awk -F. '{print $1}'`
MajMin=`echo $Ver | awk -F. '{print $1 "." $2}'`
if [ -f $Bld/.debug -o "$2" = 'debug' ]; then
    Dbg=y					# Debug option
    test -d $Debug || su -c "mkdir $Debug" $USER
fi

set -e	# Stop on errors

# In dir $1, if $2 doesn't exist, link it to $3/$2
chkln()
{
   (test -d $1 || mkdir -p $1; cd $1; test -e $2 || ln -s $3/$2 $2)
}

echo "Extracting php-$Ver source..."
test -d /usr/src/php && rm -rf /usr/src/php
mkdir /usr/src/php-$Ver; chown $USER:`id -gn $USER` /usr/src/php-$Ver
su -c "tar xf $Bld/files/php-$Ver.tar.bz2 -C /usr/src" $USER
mv /usr/src/php-$Ver /usr/src/php

cd /usr/src/php
PhpAPI=`sed -n 's/ *#define ZEND_MODULE_API_NO //p' Zend/zend_modules.h`

ConfigHelp=$Logs/config-help.out
./configure --help >$ConfigHelp
for Opt in '--with-mysql' '--with-mcrypt' '--with-ttf' '--enable-gd-native-ttf' '--enable-fpm'
do
    case "$Opt" in
	--with-*)   Sep='[ =[]';;
	*)	    Sep=' ';;
    esac
    if grep -- "$Opt$Sep" $ConfigHelp >/dev/null; then
	echo "Using ${Opt} option found in 'configure --help'"
	ExtOpts="$ExtOpts$Opt "
    fi
done
if grep -- "--enable-phpdbg " $ConfigHelp >/dev/null; then
    ExtOpts="$ExtOpts--disable-phpdbg "
fi
# Skip *-fpm package generation if --enable-fpm unknown
echo "$ExtOpts" | grep -- '--enable-fpm ' >/dev/null || >`ls -d $Bld/pkgs/*-fpm`/skip
# Skip *-mysql package generation if --with-mysql known
echo "$ExtOpts" | grep -- '--with-mysql ' >/dev/null && >`ls -d $Bld/pkgs/*-mysql`/skip

if [ -d $Bld/hooks ]; then
    for hook in $Bld/hooks/*
    do
	Show=
	Opt=
	. $hook
	if [ "$Show" ]; then
	    test "$HookShow" && HookShow="$HookShow + $Show" || HookShow=" with $Show"
	fi
	test "$Opt" && HookOpts="$HookOpts$Opt "
    done
    if [ "$HookOpts" ]; then
	grep ' need autoconf version 2.13 or' build/buildcheck.sh >/dev/null && export PHP_AUTOCONF='/usr/bin/autoconf2.13'
	mv configure configure0
	test "$Dbg" && cp -p configure0 $Debug
	su -c "./buildconf --force >$Logs/buildconf.out" $USER
	test "$Dbg" && cp -p configure $Debug
	mv $ConfigHelp $Logs/config0-help.out
	./configure --help >$ConfigHelp
    fi
fi
echo "Configuring php-$Ver$HookShow..."
test "$Dbg" && echo "ExtOpts=\"$ExtOpts\" HookOpts=\"$HookOpts\""

chkln /usr/lib libjpeg.a  x86_64-linux-gnu		# For PHP5
chkln /usr/lib libjpeg.so x86_64-linux-gnu
chkln /usr/lib libpng.a   x86_64-linux-gnu
chkln /usr/lib libpng.so  x86_64-linux-gnu
chkln /usr/lib libXpm.a   x86_64-linux-gnu
chkln /usr/include/freetype2/freetype freetype.h ..

chkln /usr/include curl x86_64-linux-gnu	# For OAuth

test -d /var/run/apache2 || mkdir /var/run/apache2	# For apache2 -V in configure
eval `grep '^export APACHE_' /etc/apache2/envvars`	# For apache2 -V in configure
if [ "$DEBVER" = 'jessie' ]; then
    MM=""
    MMD=""
    MMJ="$Maj"
else
    MM="$MajMin"
    MMD="/$MajMin"
    MMJ="$MajMin"
fi
SysconfDir="etc/php$MMD"
DataDir="usr/share/php$MMD"
PearDir='usr/share/php'
ManDir='usr/share/man'
DocDir='usr/share/doc'
VarDir='var'
su -c "EXTENSION_DIR=/usr/lib/php/$PhpAPI ./configure \
	--prefix=/usr \
	--sysconfdir=/$SysconfDir \
	--with-config-file-path=/$SysconfDir \
	--with-config-file-scan-dir=/$SysconfDir/conf.d \
	--datadir=/$DataDir \
	--mandir=/$ManDir \
	--localstatedir=/$VarDir \
	--disable-debug \
	--disable-rpath \
	--disable-cgi \
	--with-pic \
	--with-pear=/$PearDir \
	--with-apxs2=/usr/bin/apxs \
	--with-freetype-dir=/usr \
	--with-jpeg-dir=/usr \
	--with-png-dir=/usr \
	--with-xpm-dir=/usr,/usr/X11R6 \
	--with-zlib-dir=/usr \
	--with-pdo-mysql=/usr \
	--with-mysqli=/usr/bin/mysql_config \
	--with-bz2 \
	--with-curl \
	--with-gd \
	--with-gettext \
	--with-iconv \
	--with-mhash \
	--with-pcre-regex \
	--with-openssl \
	--with-xsl \
	--with-zlib \
	$ExtOpts \
	$HookOpts \
	--enable-bcmath \
	--enable-ctype \
	--enable-dom \
	--enable-ftp \
	--enable-hash \
	--enable-json \
	--enable-libxml \
	--enable-mbstring \
	--enable-pdo \
	--enable-posix \
	--enable-session \
	--enable-simplexml \
	--enable-soap \
	--enable-sockets \
	--enable-sysvmsg \
	--enable-sysvsem \
	--enable-sysvshm \
	--enable-wddx \
	--enable-xml \
	--enable-xmlreader \
	--enable-xmlwriter \
	--enable-zip \
	--disable-debug \
>$Logs/config.out 2>&1" $USER
grep 'WARNING:' $Logs/config.out | egrep -v 'bison version|need re2c' || true	# true for set -e
test "$Dbg" && cp -p Makefile $Debug/Makefile0

# Add debian stuff to shutdown lintian's "hardening-no-relro" on jessie
# Taken from https://wiki.debian.org/Hardening so should work on all debian versions
sed -i '1i# Add debian hardening stuff\
export DEB_BUILD_MAINT_OPTIONS = hardening=+all\
DPKG_EXPORT_BUILDFLAGS = 1\
include /usr/share/dpkg/buildflags.mk\
' Makefile
# Extra libs for PHP 5.2
grep '^EXTRA_LIBS = .* -lssl -lcrypto' Makefile >/dev/null || sed -i 's/-lxml2 -lxml2 -lxml2/-lssl -lcrypto/' Makefile

echo "Building php-$Ver..."
if ! su -c "make -k >$Logs/make.out 2>&1" $USER; then
    echo "\aBuilding php-$Ver FAILED:"
    grep "error:" $Logs/make.out
    exit 1
fi

set +e	# Continue on errors
if [ -f $Bld/.notest ]; then
    echo "Skiping php-$Ver tests."
else
    echo "Testing php-$Ver..."
    echo "s" | su -c "make test >$Logs/make-test.out 2>&1" $USER
    sed -n '/^FAILED TEST /,'/^============/'p' $Logs/make-test.out
    test -f php_test_results_*.txt && cp -p php_test_results_*.txt $Logs
fi
test "$Dbg" && find . ! -user $USER >$Debug/not-$USER

rm -f $Pkgs
Base='epi-php'
Phar='install-pear-nozlib.phar'
for dir in $Bld/pkgs/*
do
    PkgDir=`basename $dir`
    Pkg=`expr "$PkgDir" : '[0-9][0-9]-\(.*\)'`
    Top=$dir/top
    if [ "$Pkg" = 'pear' ]; then
	Name="$Base-$Pkg"
	PkgVer=`sed -n "s;^.*//$Phar/PEAR-\(.*\)\.tar.*$;\1;p" pear/$Phar`
	PkgNum=`cat $dir/BUILD_NUM`
    else
	Name="$Base-$MajMin-$Pkg"
	PkgVer=$Ver
	PkgNum=$BUILD_NUM
	test "$Pkg" = 'cli' && Cli="$Name"
    fi
    if [ -f $dir/skip ]; then
	echo "Skipping   package '$Pkg'"
	continue
    fi
    echo "Installing package '$Pkg'..."

    # doc directory
    sed -i "s/%YEAR%/`date '+%Y'`/" $Top/usr/share/doc/pkgname/copyright
    sed -i -e "s/%NAME%/$Name/g" -e "s/%VERSION%/$PkgVer/" -e "s/%DEBVER%/$DEBVER/" -e "s/%DATE%/`date -Rr $Bld/dist/.date`/" $Top/usr/share/doc/pkgname/changelog.Debian
    gzip -n9 $Top/usr/share/doc/pkgname/changelog*
    mv $Top/usr/share/doc/pkgname $Top/usr/share/doc/$Name

    # lintian overrides
    if [ -f $Top/usr/share/lintian/overrides/pkgname ]; then
	sed -i -e "s/%NAME%/$Name/g" -e "s/%MM%/$MM/" -e "s/%MMJ%/$MMJ/" $Top/usr/share/lintian/overrides/pkgname
	mv $Top/usr/share/lintian/overrides/pkgname $Top/usr/share/lintian/overrides/$Name
    fi

    # specific package install
    . $dir/install

    # DEBIAN directory
    sed -i -e "s/%VERSION%/$PkgVer-$PkgNum/" -e "s/%NAME%/$Name/" -e "s/%DEPS%/$CLI_DEPS/" -e "s/%CLI%/$Cli/" -e "s/%PHPAPI%/$PhpAPI/" $Top/DEBIAN/control

    # Gather extra license files
    find $Top -type f -iname license | while read f
    do
	lf=`echo $f | sed "s;^$Top/usr/share/;;"`
	echo "Removing extra license file $lf."
	rm -v $f >>$Logs/rmed_$Pkg.out
    done

    echo "Assembling package '$Pkg'..."
    out=$(fakeroot dpkg-deb -Zgzip --build $Top $Bld/dist)
    deb=$(echo $out | sed "s/^.*building package ['\`][^']*' in ['\`]\([^']*\)'\.$/\1/")

    if [ -f "$deb" ]; then
	echo "Checking   package '$Pkg': `basename $deb`..."
	lintian --allow-root $deb >$Logs/lintian_$Pkg.out
	echo "`basename $deb`" >>$Pkgs
    else
	test "$Dbg" && echo "out=\"$out\" deb=\"$deb\""
    fi
    if [ "$Dbg" ]; then
	(cd $Top;
	 find . -type f | sed 's/^..//' | sort >$Debug/files_$Pkg
	 find . -type l | sed 's/^..//' | sort >$Debug/links_$Pkg)
	test -s $Debug/links_$Pkg || rm $Debug/links_$Pkg
    fi
done
test "$Dbg" && cp -p Makefile $Debug

#make clean >$Logs/make-clean.out 2>&1
