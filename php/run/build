#!/bin/sh
#
#	build - Configure, compile and test from PHP source
#		Install and build all packages in pkgs
#
Prg=`basename $0`
Bld=`dirname $0`
Own="$USER:`id -gn $USER`"
umask 022					# Needed for lintian

Patch()
{
    # global Dbg Logs
    local l f pP

    l="$1"	# Patch level (-p<n>)
    f="$2"	# Patch file
    pP='s/^p/P/'	# pretty Print: change leading p to P with sed
    echo "Applying `basename $f`"
    echo "----- $(basename $f) -----" >>$Logs/patch.out
    if [ "$Dbg" ]; then
	su -c "patch -p$l <$f 2>&1 | sed "$pP" | tee -a $Logs/patch.out" $USER
    else
	su -c "patch -p$l <$f 2>&1 | sed "$pP" >>$Logs/patch.out" $USER
    fi
}

NumVer()
{
    local IFS val n

    IFS="${2:-.}" val=0
    for n in $1
    do
	expr "$n" : '[0-9][0-9]*' >/dev/null || { echo "NumVer: '$n' is not a number" >&2; exit 1; }
	val=$((($val*${3:-100})+$n))
    done
    test $val -eq 0 && echo "Numver: args '$*' return 0" >&2
    echo "$val"
}

#=============================================================================
#
# 	Check and setup environment
#
#=============================================================================
#
test -d $Bld/files -a -d $Bld/pkgs -a -d $Bld/dist || {
    "$0: cannot find 'files', 'pkgs' and 'dist' directories"
    exit 1
}
find $Bld/pkgs | xargs chmod go-w
Logs="$Bld/dist/.logs"				# Directory for log files
Pkgs="$Bld/dist/.pkgs"				# List of packages built
Debug="$Bld/dist/.debug"			# Directory for debug files
if [ -f $Bld/.debug -o "$2" = 'debug' ]; then
    test -d $Debug || su -c "mkdir -p $Debug" $USER
    Dbg=y					# Debug option
fi
debinfo -a >"$Logs/debinfo-a_build"
chown $Own "$Logs/debinfo-a_build"
DebRel=$(cat /etc/debian_version)

# Get version of latest PHP source
SupVer="5.2 5.6 7.1 7.4 8.1 8.2 8.4"		# UPDATE THIS on new PHP version
Ext=.tar.bz2
Ver=$(expr "$(ls $Bld/files/php-*$Ext 2>/dev/null)" : ".*/php-\([0-9\.]*\)$Ext")
if [ "$Ver" ]; then
    echo "Found source of PHP $Ver in $Bld/files/"
else
    echo "$0: cannot find $Bld/files/php-<PHP-version>$Ext"
    exit 1
fi
Maj=`echo $Ver | awk -F. '{print $1}'`
MajMin=`echo $Ver | awk -F. '{print $1 "." $2}'`
echo " $SupVer " | grep -q " $MajMin " || {
    echo "NOTICE: PHP version $MajMin is unsupported. Update SupVer= in $0 ?"
    exit 2
}

#=============================================================================
#
# 	Extract PHP Source
#
#=============================================================================
#
if [ -f "$Debug/php/Makefile" ]; then
    (cd /usr/src; ln -s $Debug/php)
    echo "Found PHP build-tree in $Debug/php"
    exit 0
fi
#   Unpack if not done
if [ ! -d /usr/src/php ]; then
    echo "Extracting php-$Ver source..."
    if [ "$Dbg" ]; then
	mkdir "$Debug/php"
	chown $Own "$Debug/php"
	(cd /usr/src; ln -s "$Debug/php" "php-$Ver")
    else
	mkdir /usr/src/php-$Ver
	chown $Own /usr/src/php-$Ver
    fi
    su -c "tar xf $Bld/files/php-$Ver$Ext -C /usr/src" $USER
    mv /usr/src/php-$Ver /usr/src/php
fi

#=============================================================================
#
# 	Configure (generate Makefile)
#
#=============================================================================
#
set -e	# Stop on errors

cd /usr/src/php		# All relative paths are to here: do NOT change it!
PhpAPI=`sed -n 's/ *#define ZEND_MODULE_API_NO //p' Zend/zend_modules.h`

ConfigHelp=$Logs/config-help.out
./configure --help >$ConfigHelp
#
#   Handle options not present in every PHP version
#
PearDir='usr/share/php'
test "$DEBNUM" -lt 10 -o "$Maj" -gt 5 && EnaIntl='--enable-intl' || EnaIntl=
for Opt in  --with-mysql --with-mcrypt --with-ttf --enable-gd-native-ttf \
	    --enable-phpdbg --enable-phpdbg-readline --enable-phpdbg-webhelper \
	    --enable-fpm --with-fpm-systemd \
	    --with-pear=/$PearDir \
	    --with-gd --enable-gd \
	    --with-freetype-dir=/usr --with-freetype \
	    --with-jpeg-dir=/usr --with-jpeg \
	    --with-xpm-dir=/usr,/usr/X11R6 --with-xpm \
	    --with-png-dir=/usr \
	    --with-readline=/usr \
	    --with-imap=shared,/usr --with-kerberos --with-imap-ssl \
	    --with-pcre-regex \
	    --with-zip \
	    $EnaIntl \
	    --enable-json \
	    --enable-hash \
	    --enable-libxml \
	    --enable-wddx \
	    --enable-zip
do
    case "$Opt" in
	--with-*)   End='[ =[]';;
	*)	    End=' ';;
    esac
    Pat=$(echo "$Opt" | sed 's/=.*$//')
    grep -Eq -- "$Pat($End|$)" $ConfigHelp && Cfg="$Opt" || Cfg=
    #   Handle special ZIP case for PHP up to 7.3
    if [ "$Opt" = '--enable-zip' ]; then
	grep -q 'bundled libzip is deprecated' configure && Dpr=y || Dpr=
	grep -q -- '--with-libzip[ =[]' $ConfigHelp && Zip='--with-libzip=/usr' || Zip=
	# if (no --enable-zip or deprecated) and --with-libzip, use it
	test -z "$Cfg" -o "$Dpr" && test "$Zip" && Cfg="$Zip"
    fi
    if [ "$Cfg" ]; then
	echo "Using option found in 'configure --help': $Cfg"
	ExtOpts="$ExtOpts$Sep$Opt"
	Sep=' '
	test "$Opt" = "$EnaIntl" && HookShow=' with intl'
    fi
done
PdoMysql='=/usr'
MysqlI='=/usr/bin/mysql_config'

# Skip *-pear package generation if --with-pear unknown
echo "$ExtOpts" | grep -q -- '--with-pear=' || >$(echo $Bld/pkgs/*-pear)/skip
# Skip *-fpm package generation if --enable-fpm unknown
echo "$ExtOpts" | grep -q -- '--enable-fpm ' || >$(echo $Bld/pkgs/*-fpm)/skip
# Skip *-phpdbg package generation if --enable-phpdbg unknown
echo "$ExtOpts" | grep -q -- '--enable-phpdbg ' || {
    grep -q -- '--disable-phpdbg ' $ConfigHelp || >$(echo $Bld/pkgs/*-phpdbg)/skip
}
# Skip *-imap package generation if --with-imap unknown
echo "$ExtOpts" | grep -q -- '--with-imap=' || >$(echo $Bld/pkgs/*-imap)/skip
# Skip *-mysql package generation if --with-mysql is known before hooks (5.x)
echo "$ExtOpts" | grep -q -- '--with-mysql ' && >$(echo $Bld/pkgs/*-mysql)/skip

#
#   Handle build-time hooks (mostly for PHP extensions)
#
su -c ">$Logs/patch.out" $USER
if [ -d $Bld/hooks ]; then
    Sep=
    for hook in $Bld/hooks/*
    do
	Show=
	Opt=
	. $hook
	if [ "$Show" ]; then
	    test "$HookShow" && HookShow="$HookShow + $Show" || HookShow=" with $Show"
	fi
	test "$Opt" && HookOpts="$HookOpts$Sep$Opt"
	Sep=' '
    done
    if [ "$HookOpts" ]; then
	test -f build/buildcheck.sh && grep -q ' need autoconf version 2.13 or' build/buildcheck.sh && export PHP_AUTOCONF='/usr/bin/autoconf2.13'
	mv configure configure0
	test "$Dbg" && cp -p configure0 $Debug
	test -f configure.ac.orig && su -c 'echo -n "Running autoupdate... " && autoupdate && echo "Done."' $USER
	su -c "./buildconf --force >$Logs/buildconf.out 2>&1" $USER
	test "$Dbg" && cp -p configure $Debug
	mv $ConfigHelp $Logs/config0-help.out
	./configure --help >$ConfigHelp
    fi
fi
chown $Own $Logs/*-help.out

#   Enable apc-bc if added by hook
if grep -q -- "--enable-apc-bc " $ConfigHelp; then
    HookOpts="$HookOpts$Sep--enable-apc-bc"
fi

echo "Configuring php-$Ver$HookShow..."
test "$Dbg" && echo "HookOpts=\"$HookOpts\""

/usr/local/bin/mkenv $Dbg

eval `grep '^export APACHE_' /etc/apache2/envvars`	# For apache2 -V in configure
#
#   Variables MM (Majeur/Mineur)
#	Permettent d'éviter les tests répétés de version Debian cible
#
#   MM ($MM, %MM%)
#	Suffixe des binaires, pages de man, fichiers de config. Vide sur Debian jessie
#
#   MMD ($MMD, %MMD%)
#	Sous-répertoire de version PHP de /etc/php. Absent sur Debian jessie
#
#   MMJ ($MMJ, %MMJ%)
#	Suffixe du module Apache2 libphp.so. Majeur seulement sous jessie
#
if [ "$DEBVER" = 'jessie' ]; then
    MM=""
    MMD=""
    MMJ="$Maj"
else
    MM="$MajMin"
    MMD="/$MajMin"
    MMJ="$MajMin"
fi
SysconfDir="etc/php$MMD"
DataDir="usr/share/php$MMD"
# PearDir defined above before ExtOpts
ManDir='usr/share/man'
DocDir='usr/share/doc'
VarDir='var'
su -c "EXTENSION_DIR=/usr/lib/php/extensions ./configure \
	--prefix=/usr \
	--sysconfdir=/$SysconfDir \
	--with-config-file-path=/$SysconfDir \
	--with-config-file-scan-dir=/$SysconfDir/conf.d \
	--datadir=/$DataDir \
	--mandir=/$ManDir \
	--localstatedir=/$VarDir \
	--disable-debug \
	--disable-rpath \
	--disable-cgi \
	--with-pic \
	--with-apxs2=/usr/bin/apxs \
	--with-zlib-dir=/usr \
	--with-pdo-mysql$PdoMysql \
	--with-mysqli$MysqlI \
	--with-bz2 \
	--with-curl \
	--with-gettext \
	--with-iconv \
	--with-mhash \
	--with-openssl \
	--with-xsl \
	--with-zlib \
	$ExtOpts \
	$HookOpts \
	--enable-bcmath \
	--enable-ctype \
	--enable-dom \
	--enable-ftp \
	--enable-mbstring \
	--enable-pdo \
	--enable-posix \
	--enable-session \
	--enable-simplexml \
	--enable-soap \
	--enable-sockets \
	--enable-sysvmsg \
	--enable-sysvsem \
	--enable-sysvshm \
	--enable-xml \
	--enable-xmlreader \
	--enable-xmlwriter \
>$Logs/config.out 2>&1" $USER
grep 'WARNING:' $Logs/config.out | grep -Ev 'bison version|need re2c' || true	# true for set -e
test "$Dbg" && cp -p Makefile $Debug/Makefile0

# Add debian stuff to shutdown lintian's "hardening-no-relro" on jessie
# Taken from https://wiki.debian.org/Hardening so should work on all debian versions
sed -i '1i# Add debian hardening stuff\
export DEB_BUILD_MAINT_OPTIONS = hardening=+all\
DPKG_EXPORT_BUILDFLAGS = 1\
include /usr/share/dpkg/buildflags.mk\
' Makefile
# Extra libs for PHP 5.2
grep -q '^EXTRA_LIBS = .* -lssl -lcrypto' Makefile || sed -i 's/-lxml2 -lxml2 -lxml2/-lssl -lcrypto/' Makefile

#=============================================================================
#
# 	Build PHP
#
#=============================================================================
#
date "+%Y-%m-%d %H:%M:%S Building php-$Ver for Debian $DEBVER $DebRel ..."
if ! su -c "make -k >$Logs/make.out 2>&1" $USER; then
    echo "\aBuilding php-$Ver FAILED:"
    grep "error:" $Logs/make.out
    exit 2
fi

#=============================================================================
#
# 	Prepare and make tests, then reset env
#
#=============================================================================
#
#   Install mysql-server if needed (PHP 5.2.17)
if [ "$debLst" -a -f "$debLst" ]; then
    echo "================================================================" >>$debLog
    test "$Dbg" && echo "Installing lenny mysql-server packages"
    for f in $(sed -nr 's;^[^ ].*/;;p' $debLst)
    do
	DEBIAN_FRONTEND='noninteractive' dpkg -i "$Bld/files/$f.deb" >>$debLog 2>&1
    done
fi
MySQL=$(command -v mysql) && echo "$(echo $DebRel | awk -F. '{printf("%2d.%02d",$1,$2)}'): $($MySQL --version)" >"$Bld/dist/.sqlver" && chown $Own "$Bld/dist/.sqlver"

#   Start and configure mysql-server
if Out="$(/usr/local/bin/dbini MYSQL_TEST_SOCKET)"; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') $(echo "$Out" | grep -v '^export ')"
    #	ext/mysql and ext/mysqli
    eval "$(echo "$Out" | grep '^export ')"
    export MYSQL_TEST_USER="$USER"
    #	ext/pdo_mysql
    export PDO_MYSQL_TEST_SOCKET="$MYSQL_TEST_SOCKET"
    export PDO_MYSQL_TEST_USER="$MYSQL_TEST_USER"
fi

set +e	# Continue on errors
if [ -f $Bld/.notest ]; then
    echo "Skipping php-$Ver tests."
    sleep 3	# Make sure DB shutdown does not happen too quickly
else
    #
    #	Make PHP tests with timeout, as 5.6.40 & 7.1.33 on buster hang
    #	on the same curl test (test 2504 in 5.6.40, test 3325 in 7.1.33)
    #	if 'ps -ef' shows a zombie shell, killing its parent unhangs
    #
    #	We basically run "make test" in the background and set a watchdog
    #	to check every $mkMax seconds that the output has been added to
    #	If not, we assume some test is stuck and try to terminate it
    #	If that fails, we terminate the whole make process group
    #
    #	Our watchdog function
    mkWake()
    {
	sleep $1
	test $? -lt 128 && kill -s ALRM $2
    }

    #	Ugly hack for ext/mysqli/tests/mysqli_report.phpt bug
    test "$DEBNUM" -ge 10 && test "$(NumVer $MajMin)" -ge 704 && rm -v ext/mysqli/tests/mysqli_report.phpt 2>&1 | sed 's/^r/R/'

    date "+%Y-%m-%d %H:%M:%S Testing php-$Ver built for Debian $DEBVER $DebRel ..."
    mkOut="$Logs/make-test.out"
    mkLog="$Logs/mktest-ps.out"

    mkErr="$Logs/make-test.err"
    exec 3>&2
    exec 2>>$mkErr	# Mostly to capture "Terminated" messages from shell
    chown $Own $mkErr

    test "$(NumVer $MajMin)" -lt 804 && Ans='s' || Ans='y'
    echo "$Ans" | su -c "make test >$mkOut 2>&1" $USER &
    mkPid=$!

    mkOld=0		# Previous mkOut's size
    mkMax=300		# 5 mn timeout with no change in $mkOut
    trap : ALRM
    while :
    do
	mkWake $mkMax $$ &
	wkPid=$!
	wait $mkPid
	mkRet=$?
	#date "+%Y-%m-%d %H:%M:%S mkRet=$mkRet"
	if [ $mkRet -lt 128 ]; then
	    wkCld=$(ps -o ppid,pid | awk "\$1 == $wkPid { print \$2 }")
	    echo "$Prg: mkRet=$mkRet wkPid=$wkPid wkCld=$wkCld" >>$mkOut
	    kill $wkCld 2>/dev/null && echo "$Prg: stopped mkWake [$wkPid,$wkCld]" >>$mkOut
	    wait
	    test $mkRet -eq 2 -a "$mkPar" && mkCld=y	# make stopped after test-abort
	    break
	fi
	# mkRet >= 128, so 'wait $mkPid' was interrupted at the end of mkWake
	wkPid=
	mkSiz=`stat -c '%s' $mkOut`
	if [ $mkSiz -eq $mkOld ]; then
	    # Try to handle the known case of the hanged curl test
	    # Our zombie shell appears as "[sh] <defunct>"
	    mkPar=$(ps -u $USER -o ppid,cmd | awk '/ <defunct>/{print $1}')
	    ps -Hu $USER -o pid,ppid,pgid,uid,cmd >$mkLog
	    echo "----------------------------------------" >>$mkLog
	    if [ "$mkPar" ]; then
		# The dd trick is for removing the CR at the end of $mkOut
		#	(this is needed for tail to return our last line)
		mkTst=$( (dd count=1 bs=$(($mkSiz - 1)) <$mkOut 2>/dev/null; echo) | tail -1 -)
		date "+%Y-%m-%d %H:%M:%S Aborting \"$mkTst\" after waiting ${mkMax}s"
		echo "FAIL Test timed-out after $mkMax seconds of inactivity" >>$mkOut

		# If there is also an orphan (PPID=1) php process,
		# stop it, as this allows the tests to continue.
		# Otherwise, kill the zombie's parent, but that aborts the make
		mkOph=$(ps -u $USER -o pid,ppid | awk '$2 == 1 {print $1}')
		if [ "$mkOph" ]; then
		    kill $mkOph && echo "Terminated orphan mkOph=$mkOph" >>$mkLog
		    wait $mkOph
		    unset mkPar
		else
		    kill $mkPar && echo "Terminated zombie's parent mkPar=$mkPar" >>$mkLog
		    wait $mkPar
		fi
	    else
		date "+%Y-%m-%d %H:%M:%S Tests appear to be stalled - Aborting !"
		# We want to kill the child of mkPid that is a process-group leader
		mkCld=$(awk "\$2 == $mkPid && \$3 == \$1 { print \$1 }" $mkLog)
		echo "mkPid=$mkPid mkCld=$mkCld" >>$mkLog
		if [ "$mkCld" ]; then
		    kill -- -$mkCld	# Abort process group
		    wait $mkCld
		    echo "wait mkCld=$mkCld -> ret=$?" >>$mkLog
		    wait $mkPid
		    echo "wait mkPid=$mkPid -> ret=$?" >>$mkLog
		else
		    echo "WARNING: No process to kill ?"
		    mkCld=y
		fi
		break
	    fi
	fi
	mkOld=$mkSiz
    done
    trap ALRM
    if [ -f $mkLog ]; then
	echo "========================================" >>$mkLog
	ps -eHo pid,ppid,pgid,uid,cmd >>$mkLog
	chown $Own $mkLog
    fi

    exec 2>&3
    exec 3>&-
    sed -i '/^Terminated$/d' $mkErr
    test -s $mkErr && echo "Errors during tests:" && sed 's/^/  /' $mkErr >&2

    sed -n '/^FAILED TEST SUMMARY/,'/^============/'p' $mkOut
    test -f php_test_results_*.txt && cp -p php_test_results_*.txt $Logs/php_test_results.txt
    if [ "$mkCld" ]; then
	echo "$Prg: ABORTED after ${mkMax}s inactivity !" >>$mkOut
	date "+%Y-%m-%d %H:%M:%S Tests of php-$Ver aborted."
    else
	date "+%Y-%m-%d %H:%M:%S Tests of php-$Ver completed."
    fi
fi	# -f $Bld/.notest
test "$Dbg" && { find . ! -user $USER >$Debug/not-$USER; chown $Own $Debug/not-$USER; }

#   Stop mysql-server
test -x /etc/init.d/mysql && Init='mysql' || Init='mariadb'
#   Prevent MYADMIN's ping error message (expected after shutdown). Valid in Debian 8-12
sed -i 's;MYADMIN ping 2>&1;MYADMIN ping 2>/dev/null;' /etc/init.d/$Init
test -x /etc/init.d/$Init && /etc/init.d/$Init stop

#   Uninstall mysql-server if needed (PHP 5.2.17)
if [ "$debLst" -a -f "$debLst" ]; then
    echo "================================================================" >>$debLog
    test "$Dbg" && echo "Removing lenny mysql-server packages"
    for f in $(sed -nr '2,$s;^[^ ].*/([^_]+).*$;\1;p' $debLst | tac)
    do
	DEBIAN_FRONTEND='noninteractive' dpkg -P "$f" >>$debLog 2>&1
    done
    echo "================================================================" >>$debLog
    apt-get install perl-base >>$debLog 2>&1
fi

#=============================================================================
#
# 	Prepare and build packages
#
#=============================================================================
#
rm -f $Pkgs
Base='epi-php'
Phar='install-pear-nozlib.phar'
for dir in $Bld/pkgs/*
do
    PkgDir=`basename $dir`
    Pkg=`expr "$PkgDir" : '[0-9]\{2\}-\(.*\)'`
    Top=$dir/top
    if [ "$Pkg" = 'pear' ]; then
	Name="$Base-$Pkg"
	PkgVer=`sed -n "s;^.*//$Phar/PEAR-\(.*\)\.tar.*$;\1;p" pear/$Phar`
	PkgNum=`cat $dir/BUILD_NUM`
	PkgDeb=
	PkgDate=`date -Rr pear/$Phar`
    else
	Name="$Base-$MajMin-$Pkg"
	PkgVer=$Ver
	PkgNum=$BUILD_NUM
	PkgDeb="+deb$DEBNUM"
	PkgDate=`date -Rr $Bld/dist/.date`
	test "$Pkg" = 'cli' && Cli="$Name"
    fi
    if [ -f $dir/skip ]; then
	echo "Skipping   package '$Pkg'"
	continue
    fi
    echo "Installing package '$Pkg'..."

    # doc directory
    sed -i "s/%YEAR%/`date '+%Y'`/" $Top/usr/share/doc/pkgname/copyright
    sed -i -e "s/%NAME%/$Name/g" -e "s/%VERSION%/$PkgVer/" -e "s/%DEBVER%/$DEBVER/" -e "s/%DATE%/$PkgDate/" $Top/usr/share/doc/pkgname/changelog.Debian
    gzip -n9 $Top/usr/share/doc/pkgname/changelog*
    mv $Top/usr/share/doc/pkgname $Top/usr/share/doc/$Name

    # lintian overrides
    if [ -f $Top/usr/share/lintian/overrides/pkgname ]; then
	sed -i -e "s/%NAME%/$Name/g" -e "s/%MM%/$MM/" -e "s/%MMJ%/$MMJ/" $Top/usr/share/lintian/overrides/pkgname
	mv $Top/usr/share/lintian/overrides/pkgname $Top/usr/share/lintian/overrides/$Name
    fi

    # specific package install
    . $dir/install

    # DEBIAN directory
    sed -i -e "s/%VERSION%/$PkgVer-$PkgNum$PkgDeb/" -e "s/%NAME%/$Name/" -e "s/%DEPS%/$CLI_DEPS/" -e "s/%CLI%/$Cli/" -e "s/%PHPAPI%/$PhpAPI/" $Top/DEBIAN/control

    # Gather extra license files
    find $Top -type f -iname license | while read f
    do
	lf=`echo $f | sed "s;^$Top/usr/share/;;"`
	echo "Removing extra license file $lf."
	rm -v $f >>$Logs/rmed_$Pkg.out
    done

    echo "Assembling package '$Pkg'..."
    out=$(fakeroot dpkg-deb -Zgzip --build $Top $Bld/dist)
    deb=$(echo $out | sed "s/^.*building package ['\`][^']*' in ['\`]\([^']*\)'\.$/\1/")

    if [ -f "$deb" ]; then
	echo "Checking   package '$Pkg': `basename $deb`..."
	if ! lintian --allow-root $deb >$Logs/lintian_$Pkg.out; then
	    test "$ChkPkg" && ChkPkg="$ChkPkg\n$Pkg" || ChkPkg="$Pkg"
	fi
	basename $deb >>$Pkgs
	chown $Own $deb
    else
	test "$Dbg" && echo "out=\"$out\" deb=\"$deb\""
	test "$AsmPkg" && AsmPkg="$AsmPkg\n$Pkg" || AsmPkg="$Pkg"
    fi
    if [ "$Dbg" ]; then
	(cd $Top;
	 find . -type f | sed 's/^..//' | sort >$Debug/files_$Pkg
	 find . -type l | sed 's/^..//' | sort >$Debug/links_$Pkg)
	test -s $Debug/links_$Pkg || rm $Debug/links_$Pkg
	chown $Own $Debug/*_$Pkg
    fi
    chown $Own $Logs/*_$Pkg.out
done
chown $Own $Pkgs
test "$Dbg" && cp -p Makefile $Debug

#=============================================================================
#
# 	Final report
#
#=============================================================================
#
if [ "$ChkPkg" ]; then
    echo "FAILED to check the following package(s):"
    echo "$ChkPkg" | sed 's/^/    /'
    exit 3
fi
if [ "$AsmPkg" ]; then
    echo "FAILED to assemble the following package(s):"
    echo "$AsmPkg" | sed 's/^/    /'
    exit 3
fi

#make clean >$Logs/make-clean.out 2>&1
exit 0
