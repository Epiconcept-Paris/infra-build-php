#!/bin/sh
#
#	Test the use of multiple PHP versions
#
#	Usage:	[multi|.]/bake <PHP-dist-dir> [<PHP-dist-dir> ...] [<Debian-version>]
#
Prg=multi/`basename $0`
Dir=`dirname $0`
IniPwd=$PWD
TopDir=../
debTop='debian'		# For messages
DebTop=$TopDir$debTop
PhpTop=${TopDir}php
TlsTop=${TopDir}tools
MulTop=

Path() { realpath --relative-to=$IniPwd $1; }
test "$Dir" || Dir=`dirname \`realpath $0\``
expr "$Dir" : / >/dev/null && Dir=`Path $Dir`
test "$Dir" = '.' || cd "$Dir"
#   Script's CWD is where it is located, but all messages assume PWD is top-level
test -d $DebTop || { echo "$Prg: missing '$debTop' directory." >&2; exit 1; }
test -d $PhpTop || { echo "$Prg: missing 'php' directory." >&2;  exit 1; }
test -d $TlsTop || { echo "$Prg: missing 'tools' directory." >&2;  exit 1; }

eval $(egrep '^Def(Dom|Tcp)=' ${TopDir}bake)
DefDeb=`ls $DebTop/*/name | sed "s;$DebTop/\([^/]*\)/name;\1;" | sort -n | tail -1`	# Default = latest
Base='epi-php'
Arch='amd64'
LF='
'
ColRed=`tput setaf 1`
ColGrn=`tput setaf 2`
ColStd=`tput setaf 7`

#
#    Parse args
#
for arg in "$@"
do
    d=`expr "$arg" : '\([5-9]\.[0-9]\.[0-9]\{,2\}-[0-9]\{,2\}*\)$'`
    v=`expr "$arg" : '\([0-9]\{1,\}\)$'`
    if [ "$d" ]; then
	ds="$ds $d"	# PHP distribs
    elif [ "$v" ]; then
	vs="$vs $v"	# Debian versions
    elif [ "$arg" = '-' ]; then
	NoRun=y
    else
	echo "$Prg: invalid PHP-dist-dir or Debian-version \"$arg\"" >&2
	exit 1
    fi
done
test -f $TopDir.norun && NoRun=y

#
#   Check Debian version
#
re=`cat ${MulTop}mkre`
for v in $vs
do
    if echo $v | egrep "^($re)$" >/dev/null && [ -f $DebTop/$v/name ]; then
	test "$DebNum" && echo "$Prg: discarding previously given Debian-version $DebNum (`cat $DebTop/$DebNum/name`)" >&2
	DebNum="$v"
    else
	echo "$Prg: unsupported Debian version \"$v\"" >&2
	echo "Supported Debian versions (default $DefDeb):" >&2
	ls $DebTop | sort -n | egrep "^($re)$" | while read v; do test -f $DebTop/$v/name && printf "    %2d (`cat $DebTop/$v/name`)\n" $v; done >&2
	exit 1
    fi
done
test "$DebNum" || DebNum=$DefDeb
DebVer=`cat $DebTop/$DebNum/name`
DebDir=$DebTop/$DebNum
debDir=$debTop/$DebNum
PkgDeb="+deb$DebNum"

if [ -f $DebDir/Dockervars.sh ]; then
    eval `sed -n 's/^TESTS_REQ=/MULTI_REQ=/p' $DebDir/Dockervars.sh`
    LIBS=`sed -nr 's/LIB7[0-9]_="([^"]+)"/\1/p' $DebDir/Dockervars.sh`
    LIBS=`echo -n "$LIBS" | tr '\n' ' '`
    MULTI_REQ="$MULTI_REQ $LIBS"
else
    echo "$Prg: missing $debDir/Dockervars.sh" >&2
    exit 1
fi
DistDir=$DebDir/dist
MultDir=$DebDir/multi
Logs=$MultDir/logs
Pkgs=$MultDir/pkgs

#
#   Check PHP-dists
#
DistOK()
{
    # global Base Arch
    local path dist

    path="$1"
    test -d "$path" || return 1
    dist=`basename $path`
    test -s $path/$Base-$2.$3-cli_$dist${PkgDeb}_$Arch.deb || return 1
    test -s $path/$Base-$2.$3-fpm_$dist${PkgDeb}_$Arch.deb || return 1
    return 0
}

nd=0
test -d $Pkgs && rm -f $Pkgs/*.deb
if [ "$ds" ]; then
    for d in $ds
    do
	eval `echo "$d" | sed -nr 's/^([5-9])\.([0-9])\.([0-9]{,2})-([0-9]{,2})$/Maj=\1 Min=\2 Rel=\3 Bld=\4/p'`
	if DistOK $DistDir/$d $Maj $Min; then
	    mkdir -p $Pkgs
	    ln $DistDir/$d/$Base-$Maj.$Min-cli_$d${PkgDeb}_$Arch.deb $Pkgs
	    ln $DistDir/$d/$Base-$Maj.$Min-fpm_$d${PkgDeb}_$Arch.deb $Pkgs
	    test -s $DistDir/$d/$Base-$Maj.$Min-mysql_$d${PkgDeb}_$Arch.deb && ln $DistDir/$d/$Base-$Maj.$Min-mysql_$d${PkgDeb}_$Arch.deb $Pkgs
	    nd=`expr $nd + 1`
	else
	    echo "$Prg: $debDir/dist/$d does not contain the necessary $Base cli and fpm packages" >&2
	    exit 1
	fi
    done
fi
if [ $nd -eq 0 ]; then
    echo "Usage: $Prg <PHP-dist-dir> [<PHP-dist-dir> ...] [<Debian-version>]" >&2
    Sep=''
    for dir in $DistDir/[5-9].[0-9].[0-9]*-[0-9]*
    do
	eval `basename $dir | sed -nr 's/^([5-9])\.([0-9])\.([0-9]{,2})-([0-9]{,2})$/Maj=\1 Min=\2 Rel=\3 Bld=\4/p'`
	if DistOK $dir $Maj $Min; then
	    Dists="$Dists$Sep`basename $dir`"
	    Sep="$LF"
	fi
    done
    if [ "$Dists" ]; then
	echo "Available dists for Debian version $DebNum ($DebVer):" >&2
	echo "$Dists" | sed 's/^/    /' >&2
    fi
    exit 1
fi
SrvConf=$MultDir/srvconf
if [ ! -f $SrvConf ]; then
    echo "Port='${MultiPort:-$DefTcp}'" >$SrvConf
    echo "Domain='${MultiDomain:-$DefDom}'" >>$SrvConf
    echo "IpSite='http://ipaddr.free.fr'" >>$SrvConf
fi
mkdir -p $MultDir/www
test -f $MultDir/www/index.php || echo "<?php header('Location: info.php'); ?>" >$MultDir/www/index.php
test -f $MultDir/www/info.php || cp -p $PhpTop/run/info.php $MultDir/www

User=`id -un`
test "$User" = 'php' && Type='epi' || Type='dev'
AddUser="groupadd -g `id -g` `id -gn`; useradd -u `id -u` -g `id -g` $User"

#
#   Build container
#
MULTI_TOP=/opt/multi
MULTI_BASE=$Type-multi-php
MULTI_IMG=$MULTI_BASE:$DebVer
MULTI_NAME=${Type}_multi_php

if docker ps | grep $MULTI_NAME >/dev/null; then
    if [ "$NoRun" ]; then
	Stop="docker stop $MULTI_NAME >/dev/null\n    "
    else
	echo "Stopping the running '$MULTI_NAME' container..."
	docker stop -t 5 $MULTI_NAME >/dev/null
	while docker ps | grep $MULTI_NAME >/dev/null
	do
	    sleep 1
	done
    fi
fi
#   Safety check, as we always call docker run with --rm
if docker ps -a | grep $MULTI_NAME >/dev/null; then
    test "$NoRun" || { echo "Deleting the existing '$MULTI_NAME' container..."; docker rm $MULTI_NAME >/dev/null; }
fi

if docker images | grep "$MULTI_BASE *$DebVer" >/dev/null; then
    echo "Re-using the existing '$MULTI_IMG' image. Use:\n    docker rmi $MULTI_IMG\nto force a rebuild."
else
    echo "Building the '$MULTI_IMG' image..."
    #
    #   Find the waitpid package
    #
    WaitPkg=`ls $DistDir/tools/epi-tools-waitpid_*_$Arch.deb 2>/dev/null`
    if [ -z "$WaitPkg" ]; then
	$TlsTop/bake $DebNum
	WaitPkg=`ls $DistDir/tools/epi-tools-waitpid_*_$Arch.deb 2>/dev/null`
	if [ -z "$WaitPkg" ]; then
	    echo "$Prg: cannot build the waitpid package, needed to build the '$MULTI_IMG' image" >&2
	    exit 1
	fi
    fi
    cp -p $WaitPkg ${MulTop}run
    Pkg=`basename $WaitPkg`
    MULCOPY="COPY ${MulTop}run/start $MULTI_TOP/start
COPY ${MulTop}run/$Pkg /tmp
RUN dpkg -i /tmp/$Pkg; rm -v /tmp/$Pkg"
    mkdir -p $Logs
    #   Variables come in order of their appearance in Dockerfile-multi.in
    DEBVER="$DebVer" DEBNUM="$DebNum" USER="$User" ADDUSER="$AddUser" MULTI_TOP="$MULTI_TOP" MULTI_REQ="$MULTI_REQ" MULCOPY="$MULCOPY" envsubst '$DEBVER $DEBNUM $USER $ADDUSER $MULTI_TOP $MULTI_REQ $MULCOPY' <${MulTop}Dockerfile.in | tee $Logs/Dockerfile-multi | docker build -f - -t $MULTI_IMG . >$Logs/docker-build.out 2>&1
    test $? -eq 0 || { echo "$ColRed\aFAILED to build the '$MULTI_IMG' docker image!$ColStd" >&2; exit 2; }
    rm -f ${MulTop}run/$Pkg
fi
MULTI_NAME="$MULTI_NAME" MULTI_TOP="$MULTI_TOP" MULTI_IMG="$MULTI_IMG" envsubst '$MULTI_NAME $MULTI_TOP $MULTI_IMG' <${MulTop}run/run >$MultDir/run
chmod +x $MultDir/run

if [ "$NoRun" ]; then
    if [ -f $TopDir.norun ]; then
	. $SrvConf
	Opt='-ti' Port="$Port" Top=`realpath $MultDir` DocRoot="$Top/www" eval `sed -nr "/^Cmd=\\"/s;PWD;Top;p" $MultDir/run`
	Cmd="$Cmd bash"
    else
	Stop=		# will be done by multi/run if needed
	Cmd="$debDir/multi/run"
    fi
    echo "Use:\n    $Stop$Cmd\nto run the container"
    exit 0
fi
exec $MultDir/run
