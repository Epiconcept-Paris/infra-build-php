#!/bin/sh
#
#	aptsrv - Start and stop APT web-server on 'repo' subdir
#
Prg=$(basename $0)
Top=$(realpath $(dirname $(dirname $0)))
NUL='/dev/null'

#
#   StopChkSrv <port> [ <qualifier> [ <relative-repo-path> ]]
#
StopChkSrv()
{
    # global Top s0 s1 s2
    local port out adj chk usr pid cwd log add

    port=$1
    test $# -gt 1 && { out='y'; test "$2" && adj=" $2"; }
    test $# -gt 2 && chk="$3"
    usr=$(id -un)
    # ps -f columns: UID PID PPID CPU STIME TTY TIME CMD [ARGS]
    #                 1   2   3    4    5    6   7    8    ...
    pid=$(ps -ef | awk "\$1==\"$usr\" && \$8==\"$s0\" && \$9==\"$s1\" && \$10==\"$s2\" && \$11==$port{print \$2}")
    if [ "$pid" ]; then
	cwd=$(realpath $(readlink "/proc/$pid/cwd") --relative-to=$Top)
	test -f "/proc/$pid/fd/2" && log=$(realpath $(readlink "/proc/$pid/fd/2") --relative-to=$Top 2>$NUL)
	#echo "Top=$Top out=$out adj=$adj chk=$chk pid=$pid cwd=$cwd log=$log"
	if [ "$chk" -a "$chk" = "$cwd" ]; then
	    test "$log" && add=" with log to $log"
	    echo "Found $s2 already on '$chk'$add" >&2
	    return 1
	fi
	kill $pid && test "$out" && {
	    test "$cwd" && add=" on '$cwd'"
	    test "$log" && date "+%Y-%m-%d %H:%M:%S -- Stopped $s2$add (PID=$pid)" >>$log
	    echo "Stopped$adj $s2$add (PID=$pid)" >&2
	    return 0
	}
    fi
    return 2
}

Usage()
{
    # global Prg
    echo "Usage: $Prg [ <debDir> | stop | stat (default) ]" >&2
    test "$1" = '-' || exit ${1:-1}
}

#
#   Main
#
s0='python3'
s1='-m'
s2='http.server'
Port=8000

if [ "$1" = 'stop' ]; then
    #	Returns: 0 if killed, 1 if kept running, 2 if no pid match or kill failed
    StopChkSrv $Port ''
    xc=$?
    test $xc -eq 2 && echo "Nothing to stop." >&2
    exit $xc
elif [ "$1" = 'stat' -o -z "$1" ]; then
    test "$1" || Usage -
    netstat -lnpt 2>$NUL | grep ":$Port "
    xc=$?
    test $xc -eq 0 || echo "No process listening on port $Port" >&2
    exit $xc
fi

test $# -eq 1 || Usage
test -d "$Top/$1" || { echo "$Prg: '$1' is not a directory" >&2; exit 2; }

cd $Top
debDir="$1"		# e.g. debian/8
logDir="dist/$Prg"
LogDir="$debDir/$logDir"
Repo="$debDir/repo"

test -d "$Repo" || {
    for a in $debDir/repo-*.txz
    do
        f=$(basename $a)
	test "$f" = 'repo-*.txz' && { echo "$Prg: cannot find any repo archive in $debDir" >&2; exit 2; }
	echo "Extracting archive $f in $debDir..."
	(cd $debDir; tar xf $f)
    done
}
test -d "$Repo/debian" || { echo "$Prg: cannot find directory '$Repo/debian'" >&2; exit 2; }

StopChkSrv $Port 'previous' "$Repo"
test $? -eq 1 && exit 1	# $s2 already serves $Repo

if [ "$(netstat -lnt | grep ":$Port ")" ]; then
    echo "$Prg: some program (see 'sudo netstat -lnpt') already listens on port $Port. Aborting" >&2
    exit 3
fi

test -d "$LogDir" || { mkdir -p "$LogDir" && echo "Created directory '$LogDir'"; }
cd "$Repo"
Log="$logDir/http.log"
$s0 $s1 $s2 $Port <$NUL 2>>"../$Log" >&2 &
pid=$!
date "+%Y-%m-%d %H:%M:%S -- Started $s2 on '$Repo' (PID=$pid)" >>"../$Log"
echo "Started $Prg on '$Repo' (PID=$pid)"
echo "Log is on $debDir/$Log"
sleep 1

test "$(netstat -lnpt 2>$NUL | grep ":$Port ")" || {
    echo "ERROR: nothing listening on port $Port ??" >&2
    exit 4
}

nCat=$(command -v nc) || {
    echo "$Prg: NOTE that 'nc' command is not available to test port $Port" >&2
    exit 0
}

Rep="$(echo "GET / HTTP/1.0\r\n\r" | $nCat localhost $Port)"
xc=$?
test "$xc" -eq 0 && echo "$Rep" | grep 'debian' >$NUL && exit 0	# All OK

#   Errors
echo "ERROR: response to GET query on '$Repo' does not contain 'debian'" >&2
if [ "$Rep" ]; then
    echo "$Rep" >"../$logDir/http-rep"
    echo "Server reply has been saved in $debDir/$logDir/http-rep" >&2
    StopChkSrv $Port 'useless'
    exit 5
else
    echo "Server response to GET HTTP from 'localhost:$Port' is EMPTY ?" >&2
    StopChkSrv $Port 'ill'
    exit 6
fi
