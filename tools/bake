#!/bin/sh
#
#	Build packages for tools
#
#	Usage:	[tools|.]/bake [<Debian-version>]
#
# shellcheck disable=SC2003	# expr is antiquated
# shellcheck disable=SC2006	# Use $(...) notation, not legacy `...`
# shellcheck disable=SC2086	# Double quote to prevent globbing
# shellcheck disable=SC2166	# Prefer [ p ] && [ q ] to [ p -a q ]
# shellcheck disable=SC2028	# echo may not expand escape sequences
#
Prg=tools/`basename $0`
Dir=`dirname $0`
IniPwd=$PWD
TopDir=../
debTop='debian'		# For messages
DebTop=${TopDir}$debTop
BinDir=${TopDir}bin
TlsTop=
ColRed=`tput setaf 1`
ColGrn=`tput setaf 2`
ColStd=`tput setaf 7`

Path() { realpath --relative-to=$IniPwd $1; }
test "$Dir" || Dir=$(dirname "$(realpath $0)")
expr "$Dir" : / >/dev/null && Dir=`Path $Dir`
# shellcheck disable=SC2164	# Use 'cd ... || exit'
test "$Dir" = '.' || cd "$Dir"
#   Script's CWD is where it is located, but all messages assume PWD is top-level
test -d $DebTop || { echo "$Prg: missing '$debTop' directory." >&2; exit 1; }

SupDeb()
{
    # global DebNum
    local v
    echo "Supported Debian versions (default $DebNum):" >&2
    ls $DebTop | sort -n | while read -r v; do test -f $DebTop/$v/name && printf "    %2d (`cat $DebTop/$v/name`)\n" $v; done >&2
}

#
#   Check usage
#
DebNum=`ls $DebTop/*/name | sed "s;$DebTop/\([^/]*\)/name;\1;" | sort -n | tail -1`	# Default = latest
if [ $# -gt 1 ]; then
    echo "Usage: $Prg [ <Debian-version> ]" >&2
    SupDeb
    exit 1
fi

#
#   Check Debian version
#
if [ "$1" ]; then
    if [ -f $DebTop/$1/name ]; then
	DebNum="$1"
    else
	echo "$Prg: unsupported Debian version \"$1\"" >&2
	SupDeb
	exit 1
    fi
fi
DebVer=`cat $DebTop/$DebNum/name`
DebDir=$DebTop/$DebNum
debDir=$debTop/$DebNum
Dist='dist/tools'
if [ -f $DebDir/Dockervars.sh ]; then
    eval "`grep '^APT_SRC=' $DebDir/Dockervars.sh`"
else
    echo "$Prg: missing $debDir/Dockervars.sh" >&2
    exit 1
fi
Logs=$DebDir/$Dist/.logs
User=`id -un`
test "$User" = 'php' && Type='epi' || Type='dev'
AddUser="groupadd -g `id -g` `id -gn`; useradd -u `id -u` -g `id -g` $User"

#
#   Build the image
#
TOOLS_TOP=/opt/tools
TOOLS_BASE=$Type-tools
TOOLS_IMG=$TOOLS_BASE:$DebVer
TOOLS_NAME=${Type}_tools
date '+===== %Y-%m-%d %H:%M:%S %Z =================='
Now=`date '+%s'`

TLSCOPY="COPY ${TlsTop}pkgs $TOOLS_TOP/pkgs
COPY ${TlsTop}run/build $TOOLS_TOP/build"
test -f ${TopDir}.debug && TLSCOPY="$TLSCOPY
RUN >$TOOLS_TOP/.debug"

if docker ps | grep $TOOLS_NAME >/dev/null; then
    echo "Stopping the running '$TOOLS_NAME' container..."
    docker stop -t 5 $TOOLS_NAME >/dev/null
    while docker ps | grep $TOOLS_NAME >/dev/null
    do
	sleep 1
    done
fi
if docker ps -a | grep $TOOLS_NAME >/dev/null; then
    echo "Deleting the existing '$TOOLS_NAME' container..."
    docker rm $TOOLS_NAME >/dev/null
fi
if docker images | grep "$TOOLS_BASE *$DebVer" >/dev/null; then
    echo "Deleting the existing '$TOOLS_IMG' image..."
    docker rmi $TOOLS_IMG >/dev/null
fi

echo "Building the '$TOOLS_IMG' image..."
mkdir -p $Logs
echo y | docker buildx prune >$Logs/docker-build.out
# shellcheck disable=SC2154	# Var referenced but not assigned
if echo "$APT_SRC" | grep 'http://' >/dev/null; then
    $BinDir/aptsrv "$debDir" && AptSrv=y
elif [ "$http_proxy" -a "$https_proxy" ]; then
    BldArgs="--build-arg http_proxy=$http_proxy --build-arg https_proxy=$https_proxy"
fi
#   Variables come in order of their appearance in Dockerfile.in
# shellcheck disable=SC2016	# Vars don't expand in single quotes
DEBVER="$DebVer" DEBNUM="$DebNum" USER="$User" ADDUSER="$AddUser" APT_SRC="$APT_SRC" TOOLS_TOP="$TOOLS_TOP" TLSCOPY="$TLSCOPY" envsubst '$DEBVER $DEBNUM $USER $ADDUSER $APT_SRC $TOOLS_TOP $TLSCOPY' <${TlsTop}Dockerfile.in | tee $Logs/Dockerfile | docker build -f - -t $TOOLS_IMG $BldArgs . >>$Logs/docker-build.out 2>&1
xc=$?
test "$AptSrv" && $BinDir/aptsrv 'stop'
test $xc -eq 0 || { echo "$ColRed\aFAILED to build the '$TOOLS_IMG' docker image!$ColStd" >&2; exit 2; }

#
#   Run the container
#
test -f ${TopDir}.norun && Opt='-ti '
if [ "$http_proxy" -a "$https_proxy" ]; then
    Env="--env http_proxy=$http_proxy --env https_proxy=$https_proxy"
fi
Cmd="docker run $Opt-v `realpath $PWD/$DebDir/$Dist`:$TOOLS_TOP/dist $Env --name $TOOLS_NAME --rm $TOOLS_IMG"
if [ -f ${TopDir}.norun ]; then
    echo "Use:\n    $Cmd bash\nto run the tools container"
else
    echo "Running the '$TOOLS_NAME' container:\n    $Cmd"
    if $Cmd; then
	echo "${ColGrn}All tools packages for Debian $DebVer made.$ColStd"
    else
	echo "$ColRed\aFAILED to make tools packages for Debian $DebVer!$ColStd"
	exit 3
    fi
fi

#
#   End
#
date '+===== %Y-%m-%d %H:%M:%S %Z =================='
End=`date '+%s'`
Len=`expr $End - $Now`
Min=`expr $Len / 60`
Sec=`expr $Len - '(' $Min '*' 60 ')'`
printf "Duration: %d:%02d\n" $Min $Sec
