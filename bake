#!/usr/bin/env bash
# We need bash for brace expansion ({8,9}) & against broken \\1 parsing in dash
#
#	bake - Build or clean PHP distribs, tools and multi
#
#	Usage:	./bake [mk | rm | <Debian-version> | <PHP-version> | tools | multi]
#		./bake [ls | ver | latest | fetch | help]
#	<PHP-version> is <Maj>.<Min>, <Maj>.<Min>.<Rel> or <Maj>.<Min>.<Rel>-<Bld>
#
PHPSITE='fr.php.net'

Prg=./`basename $0`
Dir=`dirname $0`
IniPwd=$PWD
DebTop=debian
PhpTop=php
TlsTop=tools
MulTop=multi
User=`id -un`
test "$User" = 'php' && Type='epi' || Type='dev'

# These defaults are also read here by multi/bake
DefDom=epiconcept.tld
DefTcp=80

#
# ----- Minimal do-not-run system ------------------------------
#   Each effective command is prefixed with $Do
#   If $Do is empty (normal use), commands are just executed
#   If $Do is not-empty, it acts as a prefix command to which all effective
#     commands are passed as arguments and collected for final (debug) display
#   So just uncomment the next line to not actually execute commands
#Do=Do
LF='
'
Do()
{
    # global DoCmds

    DoCmds="$DoCmds$*$LF"
}

#
# ----- Check environment --------------------------------------
#
Path() { realpath --relative-to=$IniPwd $1; }
test "$Dir" || Dir=`dirname \`realpath $0\``
expr "$Dir" : / >/dev/null && Dir=`Path $Dir`
test "$Dir" = '.' || cd "$Dir"
for dir in $DebTop $PhpTop $TlsTop $MulTop
do
    test -d $dir || { echo "$Prg: missing '$dir' directory." >&2; exit 2; }
done
tty <&1 >/dev/null && trap '' HUP

DebDir()
{
    local ret v sep

    test "$1" || return
    test "$2" && ret='{' || ret=
    for v in "$@"
    do
	ret="$ret$sep$v"
	sep=','
    done
    test "$2" && echo "$ret}" || echo "$ret"
}

Sep=''
for f in `cd $DebTop; ls */name | sort -n`
do
    f="$DebTop/$f"
    dir=`dirname $f`
    test -f $dir/mkre || continue
    deb=`basename $dir`
    name=`cat $f`
    DebVer="$DebVer$Sep$deb"
    DebLst="$DebLst`printf "%2d ($name)" $deb`$LF"
    SedArg="$SedArg$Sep-e 's/$name-/$deb:/'"
    Sep=' '
done
test "$DebVer" || { echo "$Prg: no valid Debian version in '$DebTop' ??" >&2; exit 3; }
#echo "DebVer=\"$DebVer\" DebDir=\"$(DebDir $DebVer)\" DebLst=\"$DebLst\" SedArg=\"$SedArg\""
ReMajMin='[5-9]\.[0-9]$'
ReVersion='[5-9]\.[0-9]\.[0-9]\{,2\}$'
ReDistrib='\([5-9]\.[0-9]\.[0-9]\{,2\}\)-[0-9]\{,2\}$'

#
# ----- General functions --------------------------------------
#
#   Get the latest PHP versions (sets $Versions and $Latest)
#   Used for 'ver' / 'latest' / 'fetch' and for default make targets
#
Vers()
{
    # global PHPSITE Prg PhpTop Versions Latest
    local Sup

    # Build RE of all *Sup*ported PHP versions, trying to eliminate duplicates
    Sup=$(eval cat $DebTop/$(DebDir $DebVer)/mkre | tr '|' '\n' | sort -u)
    Sup=$(echo -n "$Sup" | tr '\n' '|')

    # Collect from Internet
    Versions=`curl -sSL "http://$PHPSITE/ChangeLog-5.php" "http://$PHPSITE/ChangeLog-7.php" "http://$PHPSITE/ChangeLog-8.php" | sed -nr 's;^.*<h[1-4]>Version +([^ ]+) *</h[1-4]>;\1;p'`
    test "$Versions" || echo -e "$Prg: unable to fetch the latest lists of PHP versions from \"$PHPSITE\"\n$Prg: using only the list of versions already known" >&2
    # Collect from our local PHP tree
    Versions="$Versions$LF`ls -d $PhpTop/[5-9]/[5-9].* | sed "s;^$PhpTop/./;;"`"
    # Sort
    Versions=`echo "$Versions" | sort -nru -t. -k 1,1 -k 2,2 -k 3,3`
    if [ -z "$Versions" ]; then
	echo "$Prg: empty list of known PHP versions ??" >&2
	exit 1
    fi
    Latest=`echo "$Versions" | egrep "^($Sup)\.[0-9]{,2}$" | awk -F. '{
	Mm = $1 "." $2
	if (Mm in v) {
	    if (v[Mm] < $3)
		v[Mm] = $3
	}
	else
	    v[Mm] = $3
    }
    END {
	for (Mm in v)
	    printf("%s.%s\n", Mm, v[Mm]);
    }' | sort -n -t. -k 1,1 -k 2,2 -k 3,3`
}

#
#	Usage
#
Usage()
{
    echo "Usage: ./bake [ mk | rm | <PHP-version> | <Debian-version> | tools | multi ...]" >&2
    echo -e "\t<Debian-version> is an integer or '-' for all versions" >&2
    echo -e "\t<PHP-version> is <Major>.<minor> or <Major>.<minor>.<release> or" >&2
    echo -e "\t\t\t <Major>.<minor>.<release>-<build>" >&2
    echo -e "\t\twhere <Major>, <minor> are single digit integers" >&2
    echo -e "\t\tand <release> & <build> are up to two digits integers" >&2
    echo "       ./bake [ ls | ver | latest | fetch | help ]" >&2
    exit ${1:-1}
}

#
# ----- Parse args ---------------------------------------------
#
#	'ver', 'latest' and 'fetch' commands
#
if [ "$1" = 'ver' -o "$1" = 'latest' -o "$1" = 'fetch' ]; then
    Vers
    if [ "$1" = 'ver' ]; then
	echo "Latest supported PHP versions:"
	echo "$Latest" | sed 's/^/    /'
	echo "Supported Debian versions:"
	echo -n "$DebLst" | sed 's/^/    /'
    elif [ "$1" = 'latest' ]; then
	echo "$Latest"
    else		# 'fetch'
	if [ "$Type" = 'php' -o $Dir = 'php-prod' ]; then
	    echo "$Prg: '$1' should not be used in $Dir" >&2
	    exit 1
	fi
	for v in $Latest
	do
	    M=$(echo $v | awk -F. '{print $1}')
	    test -f "$PhpTop/$M/$v/BUILD_NUM" || { Fetch="$Fetch$sep$v"; sep=' '; echo "$v is new"; }
	done
	if [ "$Fetch" ]; then
	    echo "--- Fetching $Fetch:"
	    cleanup() { rm -f "$PhpTop/.fetch"; }
	    trap cleanup 0 2
	    >"$PhpTop/.fetch"
	    for v in $Fetch
	    do
		$PhpTop/bake $v && echo "Created $PhpTop/$M/$v/BUILD_NUM = 1"
	    done
	else
	    echo "Nothing (more) to fetch" >&2
	fi
    fi
    exit 0
#
#	'ls' command
#
elif [ "$1" = 'ls' ]; then
    Red='!'
    tty <&1 >/dev/null && { Red=`tput setaf 1`; Grn=`tput setaf 2`; Std=`tput setaf 7`; }
    dirs=`eval ls -dv $DebTop/$(DebDir $DebVer)/{dist/{[5-9].*,tools},multi} 2>/dev/null`
    test "$dirs" && echo "Current distributions:"
    for dir in $dirs
    do
	Col="$Grn"
	case `basename $dir` in
	    [5-9].*)	test -f $dir/epi-php-*-cli_*.deb || Col="$Red";;
	    tools)	test -f $dir/epi-tools-waitpid_*.deb || Col="$Red";;
	    multi)	test -d $dir/pkgs -a -d $dir/logs || Col="$Red";;
	esac
	echo "    $Col$dir$Std"
    done
    exit 0
fi
#
#	other args: mk | rm | <Debian-version> | <PHP-version> | tools | multi | help
#
Mode=
nbarg=$#
while [ $# -gt 0 ]
do
    case "$1" in
	mk) Mode=Mk
	    isMk=y
	    if [ $# -eq 1 ]; then 	# last arg
		test "$toMk" || toMk="$toRm"
	    fi
	    ;;
	rm) Mode=Rm
	    isRm=y
	    ;;
	# Debian-version
	[1-9]|1[0-9]|-)
	    if [ "$1" = '-' ]; then
		AllDeb=
		AllSep=
	    elif [ -f $DebTop/$1/name -a -f $DebTop/$1/mkre ]; then
		AllDeb=$AllDeb$AllSep$1
		AllSep=' '
	    else
		echo "$Prg: invalid Debian version '$1'" >&2
		exit 3
	    fi
	    ;;
	# PHP-version or distrib, tools or multi
	[5-9].[0-9]*|tools|multi)
	    test "$Mode" || { Mode=Mk; isMk=y; }
	    if [ "$1" = 'tools' -o "$1" = 'multi' ]; then
		ok=y
	    else
		for re in "$ReMajMin" "$ReVersion" "$ReDistrib"
		do
		    expr "$1" : "$re" >/dev/null && { ok=y; break; }
		done
	    fi
	    if [ -z "$ok" ]; then
		echo "$Prg: invalid PHP-version or distrib '$1'" >&2
		exit 3
	    fi
	    Tgts=$Tgts$TgtSep$1
	    TgtSep=' '
	    ;;
	help)
	    Usage 0
	    ;;
	-n)
	    Do=Do
	    ;;
	*)  echo "$Prg: invalid argument '$1'" >&2
	    Usage
	    ;;
    esac
    shift
done
test "$AllDeb" && Debs="$AllDeb" || Debs="$DebVer"
for deb in $Debs
do
    for tgt in $Tgts
    do
	if [ "$tgt" = 'multi' ]; then
	    echo $deb | egrep "^(`cat $MulTop/mkre`)$" >/dev/null || continue
	fi
	eval echo "\" \$to$Mode\"" | grep " $deb:$tgt " >/dev/null || eval "to$Mode=\"\${to$Mode}$deb:$tgt \""
    done
done
test "$isMk" -o "$isRm" || { echo "$Prg: no mode [mk|rm] specified" >&2; Usage; }
#echo "nbarg=$nbarg Do=\"$Do\" Mode=$Mode AllDeb=\"$AllDeb\" DebVer=\"$DebVer\" isMk=\"$isMk\" isRm=\"$isRm\" toMk=\"$toMk\" toRm=\"$toRm\""

#
# ----- Remove builds ------------------------------------------
#
DockImgs=`docker images`
if [ "$isRm" ]; then
    #
    #	Default toRm
    #
    if [ -z "$toRm" ]; then
	test "$AllDeb" && Debs=$(DebDir $AllDeb) || Debs=$(DebDir $DebVer)
	# Collect directories
	toRm=`eval ls -dv $DebTop/$Debs/dist/[5-9].* $DebTop/$Debs/dist/tools $DebTop/$Debs/multi 2>/dev/null | sed -nr -e "s;^$DebTop/([0-9]+)/dist/([5-9]\\.[0-9]\\.[0-9]{,2})-[0-9]{,2}$;\\1:\\2;p" -e "s;$DebTop/([0-9]+)/dist/tools$;\\1:tools;p" -e "s;$DebTop/([0-9]+)/multi$;\\1:~multi;p"`
	# Collect docker images
	test "$AllDeb" && SedFlt=" -nr -e '/^$(DebDir $AllDeb | tr '{,}' '(|)'):/p'"
	toRm="$toRm$LF`echo "$DockImgs" | awk "/^$Type-(build|tests)-php /{print \\\$2} /^$Type-tools /{print \\\$2 \\\"-tools\\\"} /^$Type-multi-php /{print \\\$2 \\\"-~multi\\\"}" | eval sed $SedArg$SedFlt`"
	# Sort
	toRm=`echo "$toRm" | LANG=C sort -ut: | tr -d '~'`	# Remove '~' sort helper
    fi
    test "$Do" && echo "toRm:" $toRm

    #
    #	Collect elements to remove in $Objs
    #
    #	Objs:	<obj> [ $LF <obj> ...]
    #	<obj>:	[ <dir> ] '+' [ <imgs> ]
    #	<imgs>:	<img> [ ',' <img> ...] '#' <comment>
    #
    test "$toRm" && echo "Looking for elements to remove..."
    Objs=
    for tgt in $toRm
    do
	deb=`expr "$tgt" : '\([0-9]*\):.*'`
	test "$deb" || { echo "Ignoring invalid rm target '$tgt'" >&2; continue; }
	name=`cat $DebTop/$deb/name`
	key=`expr "$tgt" : '[0-9]*:\(.*\)'`
	# multi
	if [ "$key" = 'multi' ]; then
	    dir=`ls -d $DebTop/$deb/$key 2>/dev/null`
	    img=`echo "$DockImgs" | sed -nr "s/^($Type-multi-php)  *($name) .*$/\1:\2/p"`
	    #echo "dir=$dir img=\"$img\""
	    test "$img" && what="#_for_'multi'_on_$name" || what=
	    test "$dir" -o "$img" && Objs="$Objs$dir+$img$what$LF"
	# tools
	elif [ "$key" = 'tools' ]; then
	    dir=`ls -d $DebTop/$deb/dist/$key 2>/dev/null`
	    img=`echo "$DockImgs" | sed -nr "s/^($Type-tools)  *($name) .*$/\1:\2/p"`
	    #echo "dir=$dir img=\"$img\""
	    test "$img" && what="#_for_'tools'_on_$name" || what=
	    test "$dir" -o "$img" && Objs="$Objs$dir+$img$what$LF"
	# distrib or version
	else
	    ver=`expr "$key" : "$ReDistrib"`
	    # distrib
	    if [ "$ver" ]; then
		dir=`ls -d $DebTop/$deb/dist/$key 2>/dev/null`
		imgs=`echo "$DockImgs" | sed -nr "s/^($Type-(build|tests)-php)  *($name-$ver) .*$/\1:\3/p" | sort`
		expr "$imgs" : ".*$LF" >/dev/null && many=s || many=
		echo "$imgs" | grep "$Type-build-php" >/dev/null && bld=`docker run --rm "$Type-build-php:$name-$ver" sh -c "echo \\$BUILD_NUM" | tr -d ''`
		#echo "key=$key ver=$ver bld=\"$bld\" dir=\"$dir\" imgs=\"$imgs\""
		test "$key" = "$ver-$bld" && imgs=`echo -n "$imgs" | tr "$LF" ","` || imgs=
		test "$imgs" && what="#${many}_for_PHP_${ver}_on_$name" || what=
		test "$dir" -o "$imgs" && Objs="$Objs$dir+$imgs$what$LF"
	    # Maj.min or version
	    else
		test -d $DebTop/$deb/dist && vers=`(cd $DebTop/$deb/dist; ls -d $key* 2>/dev/null | sed -r "s/^([\.0-9]+)-[0-9]+$/\1/"; echo "$DockImgs" | sed -nr "s/^($Type-(build|tests)-php)  *$name-($key[\.0-9]*) .*$/\3/p") | sort -u`
		#echo "vers=\"$vers\""
		for ver in $vers
		do
		    dirs=`ls -d $DebTop/$deb/dist/$ver-* 2>/dev/null`
		    imgs=`echo "$DockImgs" | sed -nr "s/^($Type-(build|tests)-php)  *($name-$ver) .*$/\1:\3/p" | sort`
		    expr "$imgs" : ".*$LF" >/dev/null && many=s || many=
		    echo "$imgs" | grep "$Type-build-php" >/dev/null && bld=`docker run --rm "$Type-build-php:$name-$ver" sh -c "echo \\$BUILD_NUM" | tr -d ''`
		    for dir in $dirs
		    do
			dist=`basename "$dir"`
			#echo "dist=$dist ver=$ver bld=$bld"
			test "$dist" = "$ver-$bld" && img=`echo -n "$imgs" | tr "$LF" ","` || img=
			test "$img" && what="#${many}_for_PHP_${ver}_on_$name" || what=
			test "$dir" -o "$img" && Objs="$Objs$dir+$img$what$LF"
		    done
		    test "$imgs" && what="#${many}_for_PHP_${ver}_on_$name" || what=
		    test -z "$dirs" -a "$imgs" && Objs="$Objs+`echo -n "$imgs" | tr "$LF" ","`$what$LF"
		done
	    fi
	fi
    done
    dockRm=`echo "$DockImgs" | awk '/^<none> +<none> +/{print $3}' | tr "$LF" ' '`
    test "$Do" && echo "rmObjs=\"$Objs\""

    #
    #   If any objs to remove, ask for confirm and proceed
    #
    if [ "$Objs" ]; then
	echo "The following directories and/or docker images:"
	echo -n "$Objs" | tr '_' ' ' | sed -r -e 's/^([^+]+)\+?$/    \1/' -e 's/^([^+]+)\+[^#]+#(.*)$/    \1 and docker image\2/' -e 's/^\+[^#]+#(.*)$/    docker image\1/' | sort -n -t/ -k2,2
	test "$dockRm" && echo "    and some unnamed docker image(s)"
	echo -n "will be REMOVED. Proceed ? "
	read a
	if [ "$a" = 'y' -o "$a" = 'yes' ]; then
	    #
	    #   Let's do it !
	    #
	    for obj in $Objs
	    do
		dir=`expr "$obj" : '\([^+]*\)'`
		img=`expr "$obj" : '[^+]*+\(.*\)' | tr ',' ' '`
		if [ "$img" ]; then
		    what=`expr "$img" : '[^#]*#\(.*\)' | tr '_' ' '`
		    img=`expr "$img" : '\([^#]*\)'`
		fi
		test "`basename "$dir"`" = 'multi' && docker ps | grep ${Type}_multi_php >/dev/null && $Do eval "echo \"Stopping the '${Type}_multi_php' container...\"; docker stop ${Type}_multi_php >/dev/null"
		echo -n "Removing "
		test "$dir" -a "$img" && sep='and ' || sep=
		test "$dir" && { echo -n "$dir "; $Do rm -rf $dir; }
		test "$img" && { echo -n "${sep}docker image$what"; $Do eval "docker rmi $img >/dev/null"; }
		echo
	    done
	    test "$dockRm" && { echo "Removing unnamed docker images"; $Do eval "docker rmi $dockRm >/dev/null"; }
	fi
    else
	echo "Nothing to remove."
    fi
fi
test "$Do" -a "$DoCmds" && { echo "rm commands:"; echo -n "$DoCmds" | sed 's/^/    /'; DoCmds=; }

#
# ----- Make builds --------------------------------------------
#
#   Inex maj min rel
#
Inex()
{
    # global Prg inex*
    local ver rel

    test "$1" -a "$2" -a "$3" || return
    test "`eval echo "\\$inex$1$2$3"`" && return
    ver=$1.$2
    expr "$3" : '[0-9][0-9]*' >/dev/null && { ver=$ver.$3; rel=$3; } || rel="<$3>"
    echo -e "$Prg: version '$ver' is unknown. To handle it, create\n\tdirectory php/$1/$1.$2.$rel and put php-$1.$2.$rel.tar.bz2 in it." >&2
    eval "inex$1$2$3=y"		# avoid duplicate messages
}

if [ "$isMk" ]; then
    Vers
    #
    #	Default toMk
    #
    if [ -z "$toMk" ]; then
	test "$AllDeb" && Debs="$AllDeb" || Debs="$DebVer"
	for deb in $Debs
	do
	    re=`cat $DebTop/$deb/mkre`
	    for ver in `echo "$Latest" | egrep "^($re)\."`
	    do
		toMk="$toMk$deb:$ver "
	    done
	    toMk="$toMk$deb:tools "
	    echo $deb | egrep "^(`cat $MulTop/mkre`)$" >/dev/null && toMk="$toMk$deb:multi "
	done
    fi
    test "$Do" && echo "toMk:" $toMk

    #
    #	Collect elements to build in $Objs
    #
    test "$toMk" && echo "Checking elements to build..."
    Objs=
    for tgt in $toMk
    do
	deb=`expr "$tgt" : '\([0-9]*\):.*'`
	key=`expr "$tgt" : '[0-9]*:\(.*\)'`
	#echo "deb=$deb key=$key"
	if [ "$key" = 'multi' ]; then
	    #	Determine MulDebRun (debian version in which to run multi)
	    test "$deb" -gt "0$MulDebRun" && MulDebRun="$deb"
	    Objs="$Objs$tgt "
	elif [ "$key" = 'tools' ]; then
	    Objs="$Objs$tgt "
	else
	    name=`cat $DebTop/$deb/name`
	    wbld=
	    # Find proper version
	    if ver=`expr "$key" : "$ReDistrib"`; then
		wbld=`expr "$key" : '[\.0-9]*-\([0-9]\{,2\}\)$'`
	    elif expr "$key" : "$ReVersion" >/dev/null; then
		ver=$key
	    else
		expr "$key" : "$ReMajMin" >/dev/null || { echo "$Prg: cannot parse '$key'" >&2; continue; }
		eval `echo "$key" | sed -nr 's/^([5-9])\.([0-9])$/maj=\1 min=\2/p'`
		ver=`echo "$Latest" | grep "^$key\."` || { Inex $maj $min 'n'; continue; }
	    fi
	    eval `echo "$ver" | sed -nr 's/^([5-9])\.([0-9])\.([0-9]{,2})$/maj=\1 min=\2 rel=\3/p'`
	    echo "$Versions" | grep "^$ver$" >/dev/null || { Inex $maj $min $rel; continue; }
	    echo $ver | egrep "^(`cat $DebTop/$deb/mkre`)\." >/dev/null || { echo "$Prg: build of PHP $ver is not supported on $name" >&2; continue; }
	    # Find proper build
	    phpdir=php/$maj/$ver
	    bldf=$phpdir/BUILD_NUM
	    test -f $bldf && bld=`cat $bldf` || bld=
	    cmt=`git log -n1 --format=%H -- $bldf 2>/dev/null`
	    test "$cmt" && git=`git show $cmt:$bldf` || git=
	    #echo "deb=$deb ver=$ver wbld=$wbld bld=$bld git=$git"
	    test "$bld" || bld="$git"
	    test "$bld" && nbld=`expr $bld + 1` || nbld=1
	    if [ "$wbld" ]; then
		test "$bld" && opp="and previous was $bld" || opp="as first build-number"
		test "$wbld" -eq "$bld" -o "$wbld" -eq "$nbld" || echo "WARNING: build-number for PHP $ver on $name is $wbld $opp"
		bld=$wbld
	    fi
	    test "$bld" || bld=1
	    Objs="$Objs$deb:$ver-$bld "
	    # Gather PHP versions for multi on Debian <n> in MUL<n>
	    eval "MUL$deb=\"\$MUL$deb\$ver-\$bld \""
	fi
    done
    test "$Do" && echo "mkObjs=\"$Objs\""

    #
    #	Let's do it !
    #
    if [ "$Objs" ]; then
	test "$Do" && >.debug
	for obj in $Objs
	do
	    deb=`expr "$obj" : '\([0-9]*\):.*'`
	    key=`expr "$obj" : '[0-9]*:\(.*\)'`
	    name=`cat $DebTop/$deb/name`
	    # multi
	    if [ "$key" = 'multi' ]; then
		eval "mul=\$MUL$deb"
		#echo "deb=$deb mul=\"$mul\""
		if [ "$mul" ]; then
		    dir=$DebTop/$deb/multi
		    # Only run multi for Debian $MulDebRun with $MultiRun set
		    test $deb = $MulDebRun -a "$MultiRun" && run=' and running' || run=
		    test "$run" && norun= || norun='-'
		    echo "Building$run multi for $name with ${mul}on *.${MultiDomain:-$DefDom}:${MultiPort:-$DefTcp}"
		    $Do mkdir -p $dir
		    $Do eval "$MulTop/bake $deb $mul$norun | sed -u 's/$//' | tee $dir/mk.out | sed -u 's/$//'"
		else
		    echo "$Prg: no PHP-distrib selected for 'multi' on $name" >&2
		    exit 3
		fi
	    # tools
	    elif [ "$key" = 'tools' ]; then
		dir=$DebTop/$deb/dist/tools
		test -f $dir/epi-tools-waitpid_*.deb && { echo "tools are already built for $name"; continue; }
		echo "Building tools for $name"
		$Do mkdir -p $dir
		$Do eval "$TlsTop/bake $deb | sed -u 's/$//' | tee $dir/mk.out | sed -u 's/$//'"
	    # PHP
	    else
		ver=`expr "$key" : "$ReDistrib"`
		dir=$DebTop/$deb/dist/$key
		test -f $dir/epi-php-*-cli_*.deb && { echo "PHP $key is already built for $name"; continue; }
		echo "Building PHP $key for $name in $dir"
		maj=`expr "$key" : '\([5-9]\)'`
		bld=`expr "$key" : '[\.0-9]*-\([0-9]\{,2\}\)$'`
		num="php/$maj/$ver/BUILD_NUM"
		test -s $num || $Do eval "mkdir -p `dirname $num`; echo $bld >$num"
		$Do mkdir -p $dir
		$Do eval "$PhpTop/bake $ver $deb | sed -u 's/$//' | tee $dir/mk.out | sed -u 's/$//'"
	    fi
	done
    else
	echo "Nothing to make."
    fi
fi
test "$Do" -a "$DoCmds" && { echo "mk commands:"; echo -n "$DoCmds" | sed -e 's//^M/g' -e 's/^/    /'; }

exit 0
